AWSTemplateFormatVersion: '2010-09-09'
Description: Creates VPC, Subnets, Route Tables, SG, External Application ELB, ASG
  for PANW firewall and Lambda Infrastructure for the VM-Series firewall
Parameters:
  VPC:
    Description: Name of the newly created VPC
    Type: AWS::EC2::VPC::Id
    Default: panwVPC
  MGMTSubnetAz1CidrBlock:
    Type: String
    AllowedPattern: ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
  MGMTSubnetAz2CidrBlock:
    Type: String
    AllowedPattern: ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
  UntrustSubnetAz1CidrBlock:
    Type: String
    AllowedPattern: ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
  UntrustSubnetAz2CidrBlock:
    Type: String
    AllowedPattern: ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
  BootstrapBucket:
    Type: String
    Default: eu-cloud-slr
    Description: Enter the name of the Bootstrap S3 bucket for the VM-Series firewall
    MinLength: '3'
    MaxLength: '63'
  PanFwAmiId:
    Type: AWS::EC2::Image::Id
    Description: 'Link to Ami Id lookup table: https://www.paloaltonetworks.com/documentation/global/compatibility-matrix/vm-series-firewalls/aws-cft-amazon-machine-images-ami-list'
  FWInstanceType:
    Type: String
    Default: m4.xlarge
    AllowedValues:
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - m3.xlarge
      - m3.2xlarge
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
  FWLicenseType:
    Type: String
    Default: Bundle2
    AllowedValues:
      - Bundle2
  KeyName:
    Description: Amazon EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName
  SSHLocation:
    Description: Restrict SSH access to the VM-Series firewall (by default can be
      accessed from anywhere)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: '0.0.0.0/0'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  VpcAzs:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Description: Select 2 AZs
  LambdaS3Bucket:
    Type: String
    Description: VM-Series firewall Lambda/Scripts/CFT template S3 Bucket or your
      own in the same region
    Default: panw-aws-autoscale-v20
    MinLength: '3'
    MaxLength: '63'
  Debug:
    Type: String
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
    Description: Enable/Disable debug. Default is disabled

Resources:
  MGMTSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'MGMTSubnetAz1CidrBlock'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - FW-Mgmt-a
  MGMTSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'MGMTSubnetAz2CidrBlock'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - FW-Mgmt-b
    DependsOn: []
  UNTRUSTSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'UntrustSubnetAz1CidrBlock'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - security-East-West-Pub-a
    DependsOn: []
  UNTRUSTSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'UntrustSubnetAz2CidrBlock'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - security-East-West-Pub-b
    DependsOn: []
  SLRLoadBanlancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'SLRLoadBalancerTargetGroup'
      LoadBalancerArn: !Ref 'SLRLoadBalancer'
      Port: 4789
      Protocol: UDP
  SLRLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: Mirror-Target-NLB
      SecurityGroups: []
      Subnets:
        - !Ref 'UNTRUSTSubnet1'
        - !Ref 'UNTRUSTSubnet2'
      Scheme: internal
      Type: network
    DependsOn: []
  SLRLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckProtocol: TCP
      HealthCheckPort: '22'
      Port: 4789
      Protocol: UDP
      VpcId: !Ref 'VPC'
      Targets:
        - Id:
            Ref: FW1Instance
          Port: 4789
        - Id:
            Ref: FW2Instance
          Port: 4789
  SLRNetworkInterfaceTarget:
    Type: "AWS::EC2::TrafficMirrorTarget"
    Properties:
      Description: "Traffic mirror target associated with a network interface"
      NetworkLoadBalancerArn: !Ref "SLRLoadBalancer"
      Tags:
        - Key: "Name"
          Value: "SampleNetworkInterfaceTarget"
  SLRTrafficMirrorFilter:
    Type: "AWS::EC2::TrafficMirrorFilter"
    Properties:
      Description: "SLR traffic mirror filter"
      NetworkServices:
        - "amazon-dns"
      Tags:
        - Key: "Name"
          Value: "SLRFilter"

  BootstrapRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: BootstrapRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref 'BootstrapBucket'
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref 'BootstrapBucket'
                    - /*
  BootstrapInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'BootstrapRole'
  FW1ManagementNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW1 MGMT
      SubnetId: !Ref 'MGMTSubnetAz1'
      SourceDestCheck: false
      GroupSet:
        - !Ref 'VPCSecurityGroup'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - AWSFW1Mgt
    DependsOn:
      - VPCSecurityGroup
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc


  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EIP3:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc


  EIP4:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc


  associateEIP1:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt 'EIP1.AllocationId'
      NetworkInterfaceId: !Ref 'FW1UntrustNetworkInterface'
  associateEIP2:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt 'EIP2.AllocationId'
      NetworkInterfaceId: !Ref 'FW2UntrustNetworkInterface'
  associateEIP3:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt 'EIP3.AllocationId'
      NetworkInterfaceId: !Ref 'FW1ManagementNetworkInterface'
  associateEIP4:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt 'EIP4.AllocationId'
      NetworkInterfaceId: !Ref 'FW2ManagementNetworkInterface'
  FW1UntrustNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW1 E1/1
      SubnetId: !Ref 'UNTRUSTSubnet1'
      SourceDestCheck: false
      GroupSet:
        - !Ref 'VPCSecurityGroup'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - AWSFW1Untrust
    DependsOn:
      - VPCSecurityGroup
  FW2ManagementNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW2 MGMT
      SubnetId: !Ref 'MGMTSubnetAz2'
      SourceDestCheck: false
      GroupSet:
        - !Ref 'VPCSecurityGroup'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - AWSFW2Mgt
    DependsOn:
      - VPCSecurityGroup
  FW2UntrustNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW2 E1/1
      SubnetId: !Ref 'UNTRUSTSubnet2'
      SourceDestCheck: false
      GroupSet:
        - !Ref 'VPCSecurityGroup'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - AWSFW2Untrust
    DependsOn:
      - VPCSecurityGroup
  FW1Instance:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      IamInstanceProfile: !Ref 'BootstrapInstanceProfile'
      InstanceInitiatedShutdownBehavior: stop
      EbsOptimized: true
      ImageId: !Ref 'PanFwAmiId'
      InstanceType: !Ref 'FWInstanceType'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 60
      KeyName: !Ref 'KeyName'
      Monitoring: false
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - FW1
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref 'FW1UntrustNetworkInterface'
          DeviceIndex: '1'
        - NetworkInterfaceId: !Ref 'FW1ManagementNetworkInterface'
          DeviceIndex: '0'
      UserData: !Base64
        Fn::Join:
          - ''
          - - vmseries-bootstrap-aws-s3bucket=
            - !Ref 'BootstrapBucket'
    DependsOn:
      - FW1ManagementNetworkInterface
      - FW1UntrustNetworkInterface
  FW2Instance:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      IamInstanceProfile: !Ref 'BootstrapInstanceProfile'
      InstanceInitiatedShutdownBehavior: stop
      EbsOptimized: true
      ImageId: !Ref 'PanFwAmiId'
      InstanceType: !Ref 'FWInstanceType'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 60
      KeyName: !Ref 'KeyName'
      Monitoring: false
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - FW2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref 'FW2UntrustNetworkInterface'
          DeviceIndex: '1'
        - NetworkInterfaceId: !Ref 'FW2ManagementNetworkInterface'
          DeviceIndex: '0'
      UserData: !Base64
        Fn::Join:
          - ''
          - - vmseries-bootstrap-aws-s3bucket=
            - !Ref 'BootstrapBucket'
    DependsOn:
      - FW2ManagementNetworkInterface
      - FW2UntrustNetworkInterface
  VPC0TestServer:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap
        - UbuntuRegionMap
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: t2.micro
      KeyName: !Ref 'KeyName'
      Monitoring: false
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - VPC0TestServer
      NetworkInterfaces:
        - DeleteOnTermination: true
          Description: Primary network interface
          DeviceIndex: '0'
          SubnetId: !Ref 'MGMTSubnetAz2'
          GroupSet:
            - !Ref 'MgmtSecurityGroup'
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash -ex\nsudo apt-get update &&\nsudo apt-get install -y apache2\
            \ php7.0 &&\nsudo apt-get install -y libapache2-mod-php7. &&\nsudo rm\
            \ -f /var/www/html/index.html &&\nsudo wget -O /var/www/html/index.php\
            \ https://raw.githubusercontent.com/jasonmeurer/showheaders/master/showheaders.php\
            \ &&\nsudo service apache2 restart &&\nsudo echo \"done\"\n"
    DependsOn:
      - MGMTSubnetAz2
      - MgmtSecurityGroup

  MgmtSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH to MGMT interface
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - MgmtSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref 'SSHLocation'
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref 'SSHLocation'
        - IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
  UntrustSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Untrust interface
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - UntrustSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
  TrustSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for trust interface
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - TrustSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
  VPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for within VPC
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - VPCSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
Outputs:
  KeyName:
    Value: !Ref 'KeyName'
    Description: Key Pair you have selected for SSH
  SSHLocation:
    Value: !Ref 'SSHLocation'
    Description: Make sure you SSH from this IP address
